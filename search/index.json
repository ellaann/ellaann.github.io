[{"content":"新建一个 Hugo 网站。 进入你想存放 Hugo 网站文件夹的目录。如果你想放在 Documents 目录下，在终端里执行 cd ~/Documents 即可。 执行以下命令新建一个 Hugo 网站。hugo new site myblog # \u0026ldquo;myblog\u0026rdquo; 是我的网站文件夹名。 选择主题clone到本地 1 2 cd ~/myblog # 进入网站目录，用你的网站目录名替换 \u0026#34;myblog\u0026#34;。 git clone https://github.com/CaiJimmy/hugo-theme-stack/ themes/hugo-theme-stack 启动Hugo hugo server -D 使用浏览器打开 http://localhost:1313 预览。\n构建 Hugo 网站 在 Hugo 网站文件夹的根目录下，执行 hugo 命令来构建。 hugo # 构建你的 Hugo 网站，默认将静态站点保存到 \u0026quot;public\u0026quot; 目录。\n","date":"2023-02-03T23:51:50+08:00","permalink":"https://example.com/p/%E5%B8%B8%E7%94%A8hugo%E6%8C%87%E4%BB%A4/","title":"常用Hugo指令"},{"content":"什么是favicon favicon，是单词“favorite icon”的缩写，是一个帮助用户在视觉上识别和区分您的网站的小图标。 其主要目的是帮助访问者在打开多个选项卡、书签、快捷方式和地址栏时更轻松地找到您的页面。\n转换地址 有这么多的平台、设备、图标格式和尺寸，很难确切地知道你应该怎么做才能在任何地方始终如一地展示你的网站图标/品牌。 这就是为什么有多个图标生成器可用的原因。 只需快速搜索“favicon generator”，就会显示一长串网站，这些网站可帮助创建支持各种平台和设备的 favicon。\n我为这个案例选择的是 favicon.io, 同样也可以用 realfavicongenerator.net 来完成。\n具体操作 我用的hugo主题是：hugo-theme-stack\n我所要做的就是将我需要的图片上传到 favicon.io，然后出现一个包含我需要的一切的 zip 文件。 下载该文件后，我解压了 zip 文件并将内容复制到我的 Hugo 站点的static文件夹中：\n按照Hugo Stack官网指引，在config.yaml中修改favicon: /favicon.ico后，我的图标依然没有出现。\n于是我复制下载页面上生成的 HTML 片段并将其粘贴到 myblog/layouts/partials/head/custom.html\n1 2 3 4 \u0026lt;link rel=\u0026#34;apple-touch-icon\u0026#34; sizes=\u0026#34;180x180\u0026#34; href=\u0026#34;/apple-touch-icon.png\u0026#34;\u0026gt; \u0026lt;link rel=\u0026#34;icon\u0026#34; type=\u0026#34;image/png\u0026#34; sizes=\u0026#34;32x32\u0026#34; href=\u0026#34;/favicon-32x32.png\u0026#34;\u0026gt; \u0026lt;link rel=\u0026#34;icon\u0026#34; type=\u0026#34;image/png\u0026#34; sizes=\u0026#34;16x16\u0026#34; href=\u0026#34;/favicon-16x16.png\u0026#34;\u0026gt; \u0026lt;link rel=\u0026#34;manifest\u0026#34; href=\u0026#34;/site.webmanifest\u0026#34;\u0026gt; 就是这样！希望你们也能成功~\n","date":"2023-02-03T23:51:50+08:00","permalink":"https://example.com/p/%E6%B7%BB%E5%8A%A0favicon%E5%88%B0hugo%E7%9A%84%E7%BD%91%E7%AB%99%E4%B8%AD/","title":"添加Favicon到Hugo的网站中"},{"content":"TestOps Plantform First Demo 项目实现功能 1、注册\n2、登录\n3、登录后的主页显示\n4、网站归纳\n1）公司网站\n2）常用网站\n3）新增网站\n5、项目部署\u0026amp;上线\n1）测试环境部署\n2）通过dwebsocket,实现与服务器连接，输入查询指令后，页面的实时滚动\n6、SQL同步\n一、官方文档 Django中文官网: https://docs.djangoproject.com/zh-hans/3.0/\nDjango英文官网: https://docs.djangoproject.com/en/3.0/\n二、初始化 1、创建项目 使用 startproject 来创建项目\ndjango-admin startproject edrainsite\n项目显示：\n1 2 3 4 5 6 7 8 test_ops/ manage.py test_ops/ __init__.py settings.py urls.py asgi.py wsgi.py 这些目录和文件的用处是：\nThe outer test_ops/ root directory is a container for your project. Its name doesn\u0026rsquo;t matter to Django; you can rename it to anything you like. manage.py: 一个让你用各种方式管理 Django 项目的命令行工具。你可以阅读 django-admin and manage.py 获取所有 manage.py 的细节。 里面一层的 test_ops/ 目录包含你的项目，它是一个纯 Python 包。它的名字就是当你引用它内部任何东西时需要用到的 Python 包名。 (比如 test_ops.urls). test_ops/init.py：一个空文件，告诉 Python 这个目录应该被认为是一个 Python 包。如果你是 Python 初学者，阅读官方文档中的 更多关于包的知识。 test_ops/settings.py：Django 项目的配置文件。如果你想知道这个文件是如何工作的，请查看 Django 配置 了解细节。 test_ops/urls.py：Django 项目的 URL 声明，就像你网站的“目录”。阅读 URL调度器 文档来获取更多关于 URL 的内容。 test_ops/asgi.py: 兼容ASGI的Web服务器为您的项目提供服务的入口点。See How to deploy with ASGI for more details. test_ops/wsgi.py：作为你的项目的运行在 WSGI 兼容的Web服务器上的入口。阅读 如何使用 WSGI 进行部署 了解更多细节。 2、运行项目 py manage.py runserver 127.0.0.1:8028 样就可以运行起来啦 打开网址：http://127.0.0.1:8028/ 进行校验\n3、创建应用 py manage.py startapp sign\n这些目录和文件的用处是：\nmigrations/： 用于记录models中数据的变更； admin.py： 映射models中的数据到Django自带的admin后台； apps.py： 用于应用程序的配置（在新的Django版本中新增文件）； models.py： Django的模型文件，创建应用程序数据表模型（对应数据库的相关操作）； tests.py： 创建Django测试用例； views.py： Django的视图文件，控制向前段页面显示的内容。 三、编写第一个视图 1、打开 sign/views.py 把下面这些 Python 代码输入进去：\n1 2 3 4 5 from django.http import HttpResponse def index(request): return HttpResponse(\u0026#34;Hello, world. You\u0026#39;re at the sign index.\u0026#34;) 这是 Django 中最简单的视图。如果想看见效果，我们需要将一个 URL 映射到它——这就是我们需要 URLconf 的原因了。\n为了创建 URLconf，请在 sign目录里新建一个 urls.py 文件。\n2、在 sign目录里新建一个 urls.py 文件 输入如下代码：\n1 2 3 4 5 6 7 from django.urls import path from . import views urlpatterns = [ path(\u0026#39;\u0026#39;, views.index, name=\u0026#39;index\u0026#39;), ] 3、在根 URLconf 文件中指定创建的 sign.urls 模块 在 test_ops/urls.py 文件的 urlpatterns 列表里插入一个 include()， 如下：\n1 2 3 4 5 6 7 from django.contrib import admin from django.urls import path, include urlpatterns = [ path(\u0026#39;admin/\u0026#39;, admin.site.urls), path(\u0026#39;sign/\u0026#39;, include(\u0026#39;sign.urls\u0026#39;)), ] 函数 include() 允许引用其它 URLconfs。每当 Django 遇到 include() 时，它会截断与此项匹配的 URL 的部分，并将剩余的字符串发送到 URLconf 以供进一步处理。\ninclude() 的理念是使其可以即插即用。因为sign应用有它自己的 URLconf( sign/urls.py )，他们能够被放在 \u0026ldquo;/sign/\u0026rdquo; ， \u0026ldquo;/fun_sign/\u0026rdquo; ，\u0026quot;/content/sign/\u0026quot;，或者其他任何路径下，这个应用都能够正常工作。\n当包括其它 URL 模式时你应该总是使用 include() ， admin.site.urls 是唯一例外。\n四、通过templates来展示页面 1、在sign文件夹下面，创建templates文件夹 2、创建sign.html文件 1 2 3 4 5 6 7 8 \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Sign\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;Hello Web!\u0026lt;/h1\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 3、修改sign/urls.py文件 1 2 3 4 5 6 from django.shortcuts import render def sign(request): # return HttpResponse(\u0026#34;Hello, world. You\u0026#39;re at the sign index.\u0026#34;) return render(request, \u0026#39;sign.html\u0026#39;) 4、修改settings.py文件，新增'sign',文字 1 2 3 4 5 6 7 8 9 10 11 12 INSTALLED_APPS = [ \u0026#39;django.contrib.admin\u0026#39;, \u0026#39;django.contrib.auth\u0026#39;, \u0026#39;django.contrib.contenttypes\u0026#39;, \u0026#39;django.contrib.sessions\u0026#39;, \u0026#39;django.contrib.messages\u0026#39;, \u0026#39;django.contrib.staticfiles\u0026#39;, # 你项目的 TEMPLATES 配置项描述了 Django 如何载入和渲染模板。 # 默认的设置文件设置了 DjangoTemplates 后端，并将 APP_DIRS 设置成了 True。 # 这一选项将会让 DjangoTemplates 在每个 INSTALLED_APPS 文件夹中寻找 \u0026#34;templates\u0026#34; 子目录。 \u0026#39;sign\u0026#39;, ] 你项目的 TEMPLATES 配置项描述了 Django 如何载入和渲染模板。默认的设置文件设置了 DjangoTemplates 后端，并将 APP_DIRS 设置成了 True。这一选项将会让 DjangoTemplates 在每个 INSTALLED_APPS 文件夹中寻找 \u0026ldquo;templates\u0026rdquo; 子目录。这就是为什么尽管我们没有像在第二部分中那样修改 DIRS 设置，Django 也能正确找到 polls 的模板位置的原因。\n输入网址：http://127.0.0.1:8028/sign/\n五、数据库配置 Django 提供完善的模型（model）层主要用来创建和存取数据，不需要我们直接对数据库操作。\nDjango模型的基础知识：\n每个模型是一个Python类，继承django.db.models.Model类 该模型的每个属性表示一个数据库表字段 所有这一切，已经给了你一个自动生成数据库访问的API 1、打开 test_ops/settings.py ,配置Database 这是个包含了 Django 项目设置的 Python 模块。通常，这个配置文件使用 SQLite 作为默认数据库。如果你不熟悉数据库，或者只是想尝试下 Django，这是最简单的选择。Python 内置 SQLite，所以你无需安装额外东西来使用它。当你开始一个真正的项目时，你可能更倾向使用一个更具扩展性的数据库，例如 PostgreSQL，避免中途切换数据库这个令人头疼的问题。\n如果你想使用其他数据库，你需要安装合适的 database bindings ，然后改变设置文件中 DATABASES 'default' 项目中的一些键值：\nENGINE \u0026ndash; 可选值有 'django.db.backends.sqlite3'，'django.db.backends.postgresql'，'django.db.backends.mysql'，或 'django.db.backends.oracle'。其它 可用后端。 NAME - 数据库的名称。如果使用的是 SQLite，数据库将是你电脑上的一个文件，在这种情况下， NAME 应该是此文件的绝对路径，包括文件名。默认值 os.path.join(BASE_DIR, 'db.sqlite3') 将会把数据库文件储存在项目的根目录。 1 2 3 4 5 6 7 8 9 # Database # https://docs.djangoproject.com/en/3.0/ref/settings/#databases DATABASES = { \u0026#39;default\u0026#39;: { \u0026#39;ENGINE\u0026#39;: \u0026#39;django.db.backends.sqlite3\u0026#39;, \u0026#39;NAME\u0026#39;: os.path.join(BASE_DIR, \u0026#39;db.sqlite3\u0026#39;), } } 2、打开 test_ops/settings.py ,配置INSTALLED_APPS test_ops/settings.py文件头部的 INSTALLED_APPS 设置项。这里包括了会在你项目中启用的所有 Django 应用。应用能在多个项目中使用，你也可以打包并且发布应用，让别人使用它们。\n通常， INSTALLED_APPS 默认包括了以下 Django 的自带应用：\ndjango.contrib.admin \u0026ndash; 管理员站点。 django.contrib.auth \u0026ndash; 认证授权系统。 django.contrib.contenttypes \u0026ndash; 内容类型框架。 django.contrib.sessions \u0026ndash; 会话框架。 django.contrib.messages \u0026ndash; 消息框架。 django.contrib.staticfiles \u0026ndash; 管理静态文件的框架。 这些应用被默认启用是为了给常规项目提供方便。\n默认开启的某些应用需要至少一个数据表，所以，在使用他们之前需要在数据库中创建一些表。请执行以下命令：\n...\\\u0026gt; py manage.py migrate\n就像之前说的，为了方便大多数项目，我们默认激活了一些应用，但并不是每个人都需要它们。如果你不需要某个或某些应用，你可以在运行 migrate 前毫无顾虑地从 INSTALLED_APPS 里注释或者删除掉它们。 migrate 命令只会为在 INSTALLED_APPS 里声明了的应用进行数据库迁移。\n3、创建模型 在sign/models.py文件中，新增\n4、当模型创建好以后，执行数据库迁移 使用如下命令进行数据库表的初始化和创建（迁移）：\n1 2 运行 python manage.py makemigrations sign 为模型的改变生成迁移文件。 运行 python manage.py migrate 来应用数据库迁移。 六、认证登录 1、创建admin系统用户 ...\\\u0026gt; python manage.py createsuperuser\n2、输入用户、密码信息 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 py manage.py createsuperuser sername (leave blank to use \u0026#39;edrain\u0026#39;): admin mail address: admin@mail.com Password: assword (again): his password is too short. It must contain at least 8 characters. his password is too common. ypass password validation and create user anyway? [y/N]: y uperuser created successfully. 七、开发模式 这段话在Django官方文档也曾出现过：鼓励松耦合以及对应用程序中不同部分的严格分割。\n1、MVC开发模式 MVC：Model-View-Controller\nmodel：数据存取层。 view：表现逻辑，代表的是系统中选择显示什么和怎么显示的部分。 controller：业务逻辑，代表系统中根据用户输入及需要访问模型，使用哪个视图的哪部分。 对应到Django后：\nModel：数据存取部分，由Django数据库层处理； View：表现逻辑，选择显示哪些数据要显示以及怎样显示的部分，由Django的视图和模板处理； Controller：业务逻辑，由Django根据URLconf设置，对给定URL调用适当的Python函数。 2、MTV开发模式 由于Controller由框架自行处理，而Django里更关注的是模型（Model）、模板（Template）、视图（View），因此Django也被称为MTV框架。\nMTV：Model-Template-Views\nModel：模型，数据存取层，该层处理与数据相关的所有事务，即如何存取、如果验证有效等； Template：模板，表现层，该层处理与表现相关的所有事务，即如何在页面或者其他类型文档中进行显示； View：视图，业务逻辑层，该层包含存取模型及调取恰当模板的相关逻辑，可以看作是模型和模板之间的桥梁。 八、小技巧 1、去除模板中的硬编码 URL 1）修改sign/templates/sign/sign_in.html文件\n当发送登录请求时，链接是硬编码的：\n\u0026lt;form action=\u0026quot;/login_action/\u0026quot; method=\u0026quot;post\u0026quot;\u0026gt;\n问题在于，硬编码和强耦合的链接，对于一个包含很多应用的项目来说，修改起来是十分困难的。然而，因为你在 sign.urls 的 url() 函数中通过 name 参数为 URL 定义了名字，你可以使用 {% url %} 标签代替它。\n替代如下：\n\u0026lt;form action=\u0026quot;{% url 'login_action' %}\u0026quot; method=\u0026quot;post\u0026quot;\u0026gt;\n这个标签的工作方式是在 sign.urls 模块的 URL 定义中寻具有指定名字的条目。你可以回忆一下，具有名字 \u0026rsquo;login_action\u0026rsquo; 的 URL 是在如下语句中定义的。\n2）修改sign/urls.py文件，新增name='login_action'\npath('login_action/', views.login_action, name='login_action'), # name的值可以在html中关联{% url 'xxx' %} template tag\n如果你想改变登录视图的 URL，比如想改成 sign/edrain/login_action/ ，你不用在模板里修改任何东西（包括其它模板），只要在sign/urls.py 里稍微修改一下就行。\n修改如下：\n1 2 # added the word \u0026#39;edrain\u0026#39; path(\u0026#39;edrain/login_action/\u0026#39;, views.login_action, name=\u0026#39;login_action\u0026#39;), 2、为 URL 名称添加命名空间 Django 如何知道 {% url %} 标签到底对应哪一个应用的 URL 呢？\n1）在根 URLconf 中添加命名空间。在 sign/urls.py 文件中稍作修改，加上 app_name 设置命名空间：\n1 2 3 4 5 6 7 8 9 from django.urls import path from . import views app_name = \u0026#39;sign\u0026#39; # 设置命名空间 urlpatterns = [ path(\u0026#39;\u0026#39;, views.sign, name=\u0026#39;sign\u0026#39;), path(\u0026#39;login_action/\u0026#39;, views.login_action, name=\u0026#39;login_action\u0026#39;), # name的值可以在html中关联{% url \u0026#39;xxx\u0026#39; %} template tag ] 2）修改sign/templates/sign/sign_in.html文件,\n从\u0026lt;form action=\u0026quot;{% url 'login_action' %}\u0026quot; method=\u0026quot;post\u0026quot;\u0026gt;\n修改为指向具有命名空间的详细视图，变更为：\n\u0026lt;form action=\u0026quot;{% url 'sign:login_action' %}\u0026quot; method=\u0026quot;post\u0026quot;\u0026gt;\n3、HttpReponseDirect使用软编码链接 硬编码链接：可以通过使用HttpResponseRedirect(\u0026rsquo;/index/?page=2\u0026rsquo;)直接获取第2页的文章列表\nHttpReponseDirect只支持hard coded urls(硬编码链接), 不能直接使用命名的URL，如使用HttpResponseDirect(\u0026lsquo;blog:article_list‘)是错误的。\n在使用URL命名时，我们需要先通过URL反向解析方法reverse先对命名URL(article_list)进行解析，然后再使用HttpReponseRedirect定向(如下面的代码)。背后的逻辑是reverse(\u0026lsquo;blog:article_list\u0026rsquo;)=\u0026rsquo;/index/\u0026rsquo;。\n1 2 3 4 5 6 7 def login_action(request): \u0026#34;\u0026#34;\u0026#34;执行 登录按钮 操作后的界面\u0026#34;\u0026#34;\u0026#34; if request.method == \u0026#39;POST\u0026#39;: username = request.POST.get(\u0026#39;username\u0026#39;, \u0026#39;\u0026#39;) # 此处对应表单的form中的input的 name属性 password = request.POST.get(\u0026#39;password\u0026#39;, \u0026#39;\u0026#39;) if username == \u0026#39;qwer\u0026#39; and password == \u0026#39;qwer\u0026#39;: return HttpResponseRedirect(reverse(\u0026#39;sign:home\u0026#39;)) # 对路径重定向，成功登陆之后重新指向 /sign/home/ 页面 链接：https://blog.csdn.net/weixin_42134789/article/details/81505963\n九、疑问 Q1：db.sqlite3是什么？ A1：链接：https://www.runoob.com/sqlite/sqlite-intro.html\nSQLite是一个进程内的库，实现了自给自足的、无服务器的、零配置的、事务性的 SQL 数据库引擎。它是一个零配置的数据库，这意味着与其他数据库一样，您不需要在系统中配置。就像其他数据库，SQLite 引擎不是一个独立的进程，可以按应用程序需求进行静态或动态连接。SQLite 直接访问其存储文件。\nQ2:项目和应用区别？ A2：链接：https://docs.djangoproject.com/zh-hans/3.0/intro/tutorial01/\n应用程序是执行某项操作的Web应用程序，例如Weblog系统，公共记录数据库或小型民意调查应用程序。\n项目是特定网站的配置和应用程序的集合。一个项目可以包含多个应用程序。一个应用程序可以在多个项目中。\nQ3：Pycharm提示“Unresolved attribute reference \u0026lsquo;objects\u0026rsquo; for class \u0026lsquo;UserModel\u0026rsquo;” A3：You need to enable Django support. Go to\nPyCharm -\u0026gt; Preferences -\u0026gt; Languages \u0026amp; Frameworks -\u0026gt; Django\nand then check Enable Django Support\nQ4：USE_TZ时区问题 datetime.datetime.now()、datetime.datetime.utcnow()与django.util.timezone.now()的区别\ndatetime.datetime.now()： 输出的永远是本地时间（naive time）与配置无任任何关系。\ndatetime.datetime.utcnow()： 如果setting中配置USE_TZ=True则输出的是UTC时间（naive time）;如果setting中配置USE_TZ=False，则该输出时间与datetime.datetime.now()完全相同。\ndjango.util.timezone.now()： 如果setting中配置USE_TZ=True则输出的是UTC时间（active time），如果配置USE_TZ=False，则与datetime.datetime.now()完全相同。\n","date":"2020-01-08T23:51:50+08:00","permalink":"https://example.com/p/testops-plantform-first-demo/","title":"TestOps Plantform First Demo"}]